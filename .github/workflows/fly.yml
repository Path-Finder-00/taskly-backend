

name: Fly Deploy

on:
  push:
    branches:
      - main

jobs:
  trigger_frontend_workflow:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
    
      - name: Trigger Frontend Workflow
        run: |
          curl -X POST -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.TASKLY_FRONTEND_TOKEN }}" \
          https://api.github.com/repos/Path-Finder-00/taskly-frontend/dispatches \
          -d '{"event_type":"run-workflow"}'

      - name: Get Frontend Workflow Run ID
        id: get_run_id
        run: |
          sleep 30
          run_id=$(curl -s -H "Authorization: token ${{ secrets.TASKLY_FRONTEND_TOKEN }}" \
          "https://api.github.com/repos/Path-Finder-00/taskly-frontend/actions/runs?event=repository_dispatch&per_page=1" \
          | jq -r '.workflow_runs[0].id')
          echo "::set-output name=run_id::$run_id"

      - name: Wait for Frontend Workflow Completion
        id: wait
        run: |
          run_id=${{ steps.get_run_id.outputs.run_id }}
          status="in_progress"
          conclusion="null"
          while [[ "$status" == "in_progress" || "$status" == "queued" ]]; do
            sleep 30
            response=$(curl -s -H "Authorization: token ${{ secrets.TASKLY_FRONTEND_TOKEN }}" \
            "https://api.github.com/repos/Path-Finder-00/taskly-frontend/actions/runs/$run_id")
            status=$(echo $response | jq -r '.status')
            conclusion=$(echo $response | jq -r '.conclusion')
            echo "Current status: $status, conclusion: $conclusion"
          done
          if [[ "$conclusion" != "success" ]]; then
            echo "Workflow did not complete successfully"
            exit 1
          fi

  fetch_file:
    needs: trigger_frontend_workflow
    runs-on: ubuntu-latest

    steps:
      - name: Checkout back-end
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: ./

      - name: List files
        run: ls -R
      
      - name: Copy dist from front-end
        run: |
          rm -r ./dist/
          cp -r ./dist/ ./dist/

  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    needs: fetch_file
    concurrency: deploy-group
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: npm install
      - run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
